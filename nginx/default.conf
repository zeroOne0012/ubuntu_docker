server{
    listen 80;
    listen [::]:80;
    server_name localhost;
    return 301 https://$host$request_uri;
    # return 301 https://localhost; # ?
}


server {
    listen       443 ssl;
    server_name  localhost;


    location / {
        root /usr/share/nginx/html;
        index index.html index.htm;
    }



    location /node/ {
        proxy_pass http://node_server/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_cache off;
    }


    location /socket.io/ {
        proxy_pass http://node_server_ws/socket.io/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        
    # # Socket.IO의 long polling을 위한 설정
    # proxy_buffering off;

        proxy_read_timeout 86400;
        proxy_send_timeout 86400;
        proxy_connect_timeout 86400;

    # # WebSocket 핸드셰이크 설정
    # proxy_set_header Sec-WebSocket-Version 13;
    # proxy_set_header Sec-WebSocket-Key $http_sec_websocket_key;
    # proxy_set_header Sec-WebSocket-Extensions $http_sec_websocket_extensions;


        proxy_redirect off;
    }




    ssl_session_cache    shared:SSL:1m;
    ssl_session_timeout  5m;

#  약한 해시 알고리즘 허용용
    # ssl_ciphers  HIGH:!aNULL:!MD5;
    # ssl_prefer_server_ciphers  on;

# OpenSSL
    # ssl_certificate      private.crt;
    # ssl_certificate_key  private.key;
# mkcert
    ssl_certificate      cert.pem;
    ssl_certificate_key  key.pem;
}

